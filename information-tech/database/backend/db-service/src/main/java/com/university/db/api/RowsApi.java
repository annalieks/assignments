/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.university.db.api;

import com.university.db.api.model.RowDto;
import com.university.db.api.model.RowMetadataDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-23T05:08:40.079908200+01:00[Europe/Berlin]")
@Api(value = "Rows", description = "the Rows API")
public interface RowsApi {

    @ApiOperation(value = "Create a new row", nickname = "createRow", notes = "", response = RowDto.class, tags={ "rows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Row was created successfully", response = RowDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/rows",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RowDto> createRow(@ApiParam(value = "Row data" ,required=true )  @Valid @RequestBody RowMetadataDto body
,@ApiParam(value = "Table id where to create a row in",required=true) @PathVariable("tableId") String tableId
);


    @ApiOperation(value = "Delete an existing row", nickname = "deleteRow", notes = "", tags={ "rows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Row was deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table or Row was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/rows/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRow(@ApiParam(value = "Table id where to delete a row in",required=true) @PathVariable("tableId") String tableId
,@ApiParam(value = "Row id to delete",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Edit an existing row", nickname = "editRow", notes = "", response = RowDto.class, tags={ "rows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Row was edited successfully", response = RowDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table or Row was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/rows/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<RowDto> editRow(@ApiParam(value = "New row data" ,required=true )  @Valid @RequestBody RowMetadataDto body
,@ApiParam(value = "Table id where to edit a row in",required=true) @PathVariable("tableId") String tableId
,@ApiParam(value = "Row id to edit",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Find all rows", nickname = "findAllRows", notes = "", response = RowDto.class, responseContainer = "List", tags={ "rows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Rows were found successfully", response = RowDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/rows",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<RowDto>> findAllRows(@ApiParam(value = "Table id where to search for rows",required=true) @PathVariable("tableId") String tableId
);


    @ApiOperation(value = "Find row by id", nickname = "findRowById", notes = "", response = RowDto.class, tags={ "rows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Row was found successfully", response = RowDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Row was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/rows/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RowDto> findRowById(@ApiParam(value = "Row id to search for",required=true) @PathVariable("id") String id
);

}
