/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.university.db.api;

import com.university.db.api.model.ColumnDto;
import com.university.db.api.model.ColumnEditableMetadataDto;
import com.university.db.api.model.ColumnMetadataDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-23T05:08:40.079908200+01:00[Europe/Berlin]")
@Api(value = "Columns", description = "the Columns API")
public interface ColumnsApi {

    @ApiOperation(value = "Create a new column", nickname = "createColumn", notes = "", response = ColumnDto.class, tags={ "columns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Column created successfully", response = ColumnDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/columns",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ColumnDto> createColumn(@ApiParam(value = "Column data" ,required=true )  @Valid @RequestBody ColumnMetadataDto body
,@ApiParam(value = "Table id where to create a column in",required=true) @PathVariable("tableId") String tableId
);


    @ApiOperation(value = "Delete an existing column", nickname = "deleteColumn", notes = "", tags={ "columns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Column was deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid ids supplied"),
        @ApiResponse(code = 404, message = "Table or Column was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/columns/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteColumn(@ApiParam(value = "Table id where the column exists",required=true) @PathVariable("tableId") String tableId
,@ApiParam(value = "Column id",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Edit an existing column", nickname = "editColumn", notes = "", response = ColumnDto.class, tags={ "columns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Column was edited successfully", response = ColumnDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table or Column was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/columns/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ColumnDto> editColumn(@ApiParam(value = "New column data" ,required=true )  @Valid @RequestBody ColumnEditableMetadataDto body
,@ApiParam(value = "Table id where to the column exists",required=true) @PathVariable("tableId") String tableId
,@ApiParam(value = "Column id to edit",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Find all columns", nickname = "findAllColumns", notes = "", response = ColumnDto.class, responseContainer = "List", tags={ "columns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Columns were found successfully", response = ColumnDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Table was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/{tableId}/columns",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ColumnDto>> findAllColumns(@ApiParam(value = "Table id where to search for columns",required=true) @PathVariable("tableId") String tableId
);


    @ApiOperation(value = "Find column by id", nickname = "findColumnById", notes = "", response = ColumnDto.class, tags={ "columns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Column was found successfully", response = ColumnDto.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Column was not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/columns/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ColumnDto> findColumnById(@ApiParam(value = "Column id to search for",required=true) @PathVariable("id") String id
);

}
