/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.university.db.api;

import com.university.db.api.model.IntersectionTableDto;
import com.university.db.api.model.TableDto;
import com.university.db.api.model.TableMetadataDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-23T05:08:40.079908200+01:00[Europe/Berlin]")
@Api(value = "Tables", description = "the Tables API")
public interface TablesApi {

    @ApiOperation(value = "Create a new table", nickname = "createTable", notes = "", response = TableDto.class, tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Table was created successfully", response = TableDto.class),
        @ApiResponse(code = 400, message = "Invalid data supplied"),
        @ApiResponse(code = 404, message = "Database to add table to was not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}/tables",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TableDto> createTable(@ApiParam(value = "Table data" ,required=true )  @Valid @RequestBody TableMetadataDto body
,@ApiParam(value = "Database id where to create a table in",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Delete table by id", nickname = "deleteTableById", notes = "", tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table was deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Table or database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{databaseId}/tables/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTableById(@ApiParam(value = "Database id of the table",required=true) @PathVariable("databaseId") String databaseId
,@ApiParam(value = "Table id to delete",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Edit table", nickname = "editTable", notes = "", response = TableDto.class, tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table was edited successfully", response = TableDto.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Table or database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{databaseId}/tables/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TableDto> editTable(@ApiParam(value = "Database id of the table",required=true) @PathVariable("databaseId") String databaseId
,@ApiParam(value = "Table id to edit",required=true) @PathVariable("id") String id
,@ApiParam(value = "New table data"  )  @Valid @RequestBody TableMetadataDto body
);


    @ApiOperation(value = "Find table by id", nickname = "findTableById", notes = "", response = TableDto.class, tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table was found successfully", response = TableDto.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Table not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/tables/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TableDto> findTableById(@ApiParam(value = "Table id to search for",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Find all tables in the database", nickname = "findTablesInDatabase", notes = "", response = TableDto.class, responseContainer = "List", tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tables were found successfully", response = TableDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Database not found by provided id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}/tables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TableDto>> findTablesInDatabase(@ApiParam(value = "Database id to search tables in",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Find tables intersection", nickname = "intersectTables", notes = "", response = IntersectionTableDto.class, tags={ "tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Intersection was found successfully", response = IntersectionTableDto.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Table not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/tables/intersect",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IntersectionTableDto> intersectTables(@NotNull @ApiParam(value = "Id of the left table", required = true) @Valid @RequestParam(value = "leftId", required = true) String leftId
,@NotNull @ApiParam(value = "id of the right table", required = true) @Valid @RequestParam(value = "rightId", required = true) String rightId
);

}
