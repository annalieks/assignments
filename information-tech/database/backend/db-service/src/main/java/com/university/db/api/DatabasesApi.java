/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.university.db.api;

import com.university.db.api.model.DatabaseDto;
import com.university.db.api.model.DatabaseMetadataDto;
import com.university.db.api.model.ExportDatabaseDto;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-23T05:08:40.079908200+01:00[Europe/Berlin]")
@Api(value = "Databases", description = "the Databases API")
public interface DatabasesApi {

    @ApiOperation(value = "Create a new database", nickname = "createDatabase", notes = "", response = DatabaseDto.class, tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created a database", response = DatabaseDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DatabaseDto> createDatabase(@ApiParam(value = "Database data" ,required=true )  @Valid @RequestBody DatabaseMetadataDto body
);


    @ApiOperation(value = "Delete an existing database", nickname = "deleteDatabase", notes = "", tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Database was deleted"),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDatabase(@ApiParam(value = "ID of the database to delete",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Edit an existing Database", nickname = "editDatabase", notes = "", response = DatabaseDto.class, tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Database was edited", response = DatabaseDto.class),
        @ApiResponse(code = 400, message = "Invalid body or id supplied"),
        @ApiResponse(code = 404, message = "Database not found by id"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DatabaseDto> editDatabase(@ApiParam(value = "New database data" ,required=true )  @Valid @RequestBody DatabaseMetadataDto body
,@ApiParam(value = "ID of the database to edit",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Export an existing database", nickname = "exportDatabase", notes = "", response = ExportDatabaseDto.class, tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Database was exported successfully", response = ExportDatabaseDto.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}/export",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExportDatabaseDto> exportDatabase(@ApiParam(value = "ID of the database to export",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Find all databases", nickname = "findAllDatabases", notes = "", response = DatabaseDto.class, responseContainer = "List", tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful found all databases", response = DatabaseDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DatabaseDto>> findAllDatabases();


    @ApiOperation(value = "Find database by id", nickname = "findDatabaseById", notes = "", response = DatabaseDto.class, tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = DatabaseDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Database not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DatabaseDto> findDatabaseById(@ApiParam(value = "ID of the database to search for",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Import a database", nickname = "importDatabase", notes = "", response = DatabaseDto.class, tags={ "databases", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Database was imported successfully", response = DatabaseDto.class),
        @ApiResponse(code = 400, message = "Invalid file supplied"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/db-service/databases/import",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<DatabaseDto> importDatabase(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile database
);

}
