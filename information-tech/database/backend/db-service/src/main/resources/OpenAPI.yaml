openapi: 3.0.3
info:
  title: Database Application - 0.1.0
  description: |-
    Simple Database Engine
  version: 0.1.0
servers:
  - url: http://localhost:8080/
tags:
  - name: databases
    description: Operations with Databases
  - name: tables
    description: Operations with Tables
  - name: rows
    description: Operations with Rows
  - name: columns
    description: Operations with Columns
paths:
  /db-service/databases:
    get:
      tags:
        - databases
      summary: Find all databases
      operationId: findAllDatabases
      responses:
        '200':
          description: Successful found all databases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatabaseDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Database not found
        '405':
          description: Validation exception
    post:
      tags:
        - databases
      summary: Create a new database
      operationId: createDatabase
      requestBody:
        description: Database data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseMetadataDto'
        required: true
      responses:
        '201':
          description: Successfully created a database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatabaseDto'
        '400':
          description: Invalid ID supplied
        '405':
          description: Validation exception

  /db-service/databases/{id}:
    get:
      tags:
        - databases
      summary: Find database by id
      operationId: findDatabaseById
      parameters:
        - name: id
          in: path
          description: ID of the database to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Database not found
        '405':
          description: Validation exception
    put:
      tags:
        - databases
      summary: Edit an existing Database
      operationId: editDatabase
      parameters:
        - name: id
          in: path
          description: ID of the database to edit
          required: true
          schema:
            type: string
      requestBody:
        description: New database data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseMetadataDto'
        required: true
      responses:
        '200':
          description: Database was edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDto'
        '400':
          description: Invalid body or id supplied
        '404':
          description: Database not found by id
        '405':
          description: Validation exception
    delete:
      tags:
        - databases
      summary: Delete an existing database
      operationId: deleteDatabase
      parameters:
        - name: id
          in: path
          description: ID of the database to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Database was deleted
        '400':
          description: Invalid id supplied
        '404':
          description: Database not found
        '405':
          description: Validation exception

  /db-service/databases/{id}/export:
    get:
      tags:
        - databases
      summary: Export an existing database
      operationId: exportDatabase
      parameters:
        - name: id
          in: path
          description: ID of the database to export
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Database was exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportDatabaseDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Database not found
        '405':
          description: Validation exception

  /db-service/databases/import:
    post:
      tags:
        - databases
      summary: Import a database
      operationId: importDatabase
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                database:
                  type: string
                  format: binary
      responses:
        '200':
          description: Database was imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDto'
        '400':
          description: Invalid file supplied
        '405':
          description: Validation exception


  /db-service/databases/{id}/tables:
    post:
      tags:
        - tables
      summary: Create a new table
      operationId: createTable
      parameters:
        - name: id
          in: path
          description: Database id where to create a table in
          required: true
          schema:
            type: string
      requestBody:
        description: Table data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableMetadataDto'
        required: true
      responses:
        '201':
          description: Table was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Database to add table to was not found
        '405':
          description: Validation exception

    get:
      tags:
        - tables
      summary: Find all tables in the database
      operationId: findTablesInDatabase
      parameters:
        - name: id
          in: path
          description: Database id to search tables in
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tables were found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TableDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Database not found by provided id
        '405':
          description: Validation exception

  /db-service/databases/tables/{id}:
    get:
      tags:
        - tables
      summary: Find table by id
      operationId: findTableById
      parameters:
        - name: id
          in: path
          description: Table id to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Table was found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Table not found
        '405':
          description: Validation exception

  /db-service/databases/{databaseId}/tables/{id}:
    delete:
      tags:
        - tables
      summary: Delete table by id
      operationId: deleteTableById
      parameters:
        - name: databaseId
          in: path
          description: Database id of the table
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Table id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Table was deleted successfully
        '400':
          description: Invalid id supplied
        '404':
          description: Table or database not found
        '405':
          description: Validation exception
    put:
      tags:
        - tables
      summary: Edit table
      operationId: editTable
      parameters:
        - name: databaseId
          in: path
          description: Database id of the table
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Table id to edit
          required: true
          schema:
            type: string
      requestBody:
        description: New table data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableMetadataDto'
      responses:
        '200':
          description: Table was edited successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TableDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Table or database not found
        '405':
          description: Validation exception

  /db-service/tables/intersect:
    get:
      tags:
        - tables
      summary: Find tables intersection
      operationId: intersectTables
      parameters:
        - name: leftId
          in: query
          description: Id of the left table
          required: true
          schema:
            type: string
        - name: rightId
          in: query
          description: id of the right table
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Intersection was found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntersectionTableDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Table not found
        '405':
          description: Validation exception

  /db-service/tables/{tableId}/columns:
    post:
      tags:
        - columns
      summary: Create a new column
      operationId: createColumn
      parameters:
        - name: tableId
          in: path
          description: Table id where to create a column in
          required: true
          schema:
            type: string
      requestBody:
        description: Column data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnMetadataDto'
        required: true
      responses:
        '201':
          description: Column created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table was not found by id
        '405':
          description: Validation exception
    get:
      tags:
        - columns
      summary: Find all columns
      operationId: findAllColumns
      parameters:
        - name: tableId
          in: path
          description: Table id where to search for columns
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Columns were found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ColumnDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table was not found by id
        '405':
          description: Validation exception

  /db-service/tables/{tableId}/columns/{id}:
    delete:
      tags:
        - columns
      summary: Delete an existing column
      operationId: deleteColumn
      parameters:
        - name: tableId
          in: path
          description: Table id where the column exists
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Column id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Column was deleted successfully
        '400':
          description: Invalid ids supplied
        '404':
          description: Table or Column was not found by id
        '405':
          description: Validation exception
    put:
      tags:
        - columns
      summary: Edit an existing column
      operationId: editColumn
      parameters:
        - name: tableId
          in: path
          description: Table id where to the column exists
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Column id to edit
          required: true
          schema:
            type: string
      requestBody:
        description: New column data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnEditableMetadataDto'
        required: true
      responses:
        '200':
          description: Column was edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table or Column was not found by id
        '405':
          description: Validation exception

  /db-service/columns/{id}:
    get:
      tags:
        - columns
      summary: Find column by id
      operationId: findColumnById
      parameters:
        - name: id
          in: path
          description: Column id to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Column was found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnDto'
        '400':
          description: Invalid id supplied
        '404':
          description: Column was not found by id
        '405':
          description: Validation exception

  /db-service/rows/{id}:
    get:
      tags:
        - rows
      summary: Find row by id
      operationId: findRowById
      parameters:
        - name: id
          in: path
          description: Row id to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Row was found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Row was not found by id
        '405':
          description: Validation exception

  /db-service/tables/{tableId}/rows:
    get:
      tags:
        - rows
      summary: Find all rows
      operationId: findAllRows
      parameters:
        - name: tableId
          in: path
          description: Table id where to search for rows
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rows were found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RowDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table was not found by id
        '405':
          description: Validation exception
    post:
      tags:
        - rows
      summary: Create a new row
      operationId: createRow
      parameters:
        - name: tableId
          in: path
          description: Table id where to create a row in
          required: true
          schema:
            type: string
      requestBody:
        description: Row data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowMetadataDto'
        required: true
      responses:
        '201':
          description: Row was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table was not found by id
        '405':
          description: Validation exception

  /db-service/tables/{tableId}/rows/{id}:
    put:
      tags:
        - rows
      summary: Edit an existing row
      operationId: editRow
      parameters:
        - name: tableId
          in: path
          description: Table id where to edit a row in
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Row id to edit
          required: true
          schema:
            type: string
      requestBody:
        description: New row data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowMetadataDto'
        required: true
      responses:
        '200':
          description: Row was edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowDto'
        '400':
          description: Invalid data supplied
        '404':
          description: Table or Row was not found by id
        '405':
          description: Validation exception
    delete:
      tags:
        - rows
      summary: Delete an existing row
      operationId: deleteRow
      parameters:
        - name: tableId
          in: path
          description: Table id where to delete a row in
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Row was deleted successfully
        '400':
          description: Invalid data supplied
        '404':
          description: Table or Row was not found by id
        '405':
          description: Validation exception


components:
  schemas:
    DatabaseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    DatabaseMetadataDto:
      type: object
      properties:
        name:
          type: string
    ExportDatabaseDto:
      type: object
      properties:
        name:
          type: string
        tables:
          $ref: '#/components/schemas/ExportTableDto'
    ExportTableDto:
      type: object
      properties:
        name:
          type: string
        columns:
          $ref: '#/components/schemas/ColumnMetadataDto'
        rows:
          $ref: '#/components/schemas/RowMetadataDto'
    ColumnMetadataDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - INTEGER
            - REAL
            - CHAR
            - STRING
            - TIME
            - TIMEINVL
    RowMetadataDto:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
    TableDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    TableMetadataDto:
      type: object
      properties:
        name:
          type: string
    IntersectionTableDto:
      type: object
      properties:
        columns:
          $ref: '#/components/schemas/ColumnMetadataDto'
        rows:
          $ref: '#/components/schemas/RowMetadataDto'
    ColumnDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - INTEGER
            - REAL
            - CHAR
            - STRING
            - TIME
            - TIMEINVL
    ColumnEditableMetadataDto:
      type: object
      properties:
        name:
          type: string
    RowDto:
      type: object
      properties:
        id:
          type: string
        fields:
          type: array
          items:
            type: string
